using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEditor.SearchService;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.InputSystem;

// Controller for player this class is not the input class that is generated.
public class PlayerController : MonoBehaviour
{
    // Reference to inputAction class that is generated by unity.
    public PlayerInputActions playerInputActions;

    //Camera in the scene
    private Camera mainCamera;

    // The Select Action from inputAction class.
    private InputAction select;

    // The Deselect Action from inputAction class.
    private InputAction deSelect;

    // Reference to selected object in the scene that is moveable
    public MoveAbleObject selectedObjectInstance;

    // Awake is called when instance is being loaded
    void Awake()
    {
        // assign player Input class
        playerInputActions = new PlayerInputActions();

        // Automatically finds the camera
        mainCamera = Camera.main;

    }
    /// <summary>
    /// Enables
    /// </summary>
    private void OnEnable()
    {
        select = playerInputActions.Player.Select;
        select.Enable();
        select.performed += OnClick;

        deSelect = playerInputActions.Player.DeSelect;
        deSelect.Enable();
        deSelect.performed += OnDeselect;
    }

    /// <summary>
    /// Disables
    /// </summary>
    private void OnDisable()
    {
        select.Disable();
        select.performed -= OnClick;

        deSelect.Disable();
        deSelect.performed -= OnDeselect;
    }

    /// <summary>
    /// On click is run everytime the user clicks into the scene.
    /// Using Physics raycast.
    /// Depends on the result it will either:
    /// Assign the selectedObject .
    /// Move the selectedObejct to the position on Ground.
    /// </summary>
    private void OnClick(InputAction.CallbackContext context)
    {
        Ray ray = mainCamera.ScreenPointToRay(Mouse.current.position.ReadValue());
        RaycastHit hit;

        if (Physics.Raycast(ray, out hit))
        {
            Debug.Log(hit.transform.name);

            MoveAbleObject hitObject = hit.collider.gameObject.GetComponent<MoveAbleObject>();

            if (hitObject != null)
                selectedObjectInstance = hitObject;

            if (selectedObjectInstance != null && hit.collider.CompareTag("Ground"))
            {
                NavMeshAgent agent = selectedObjectInstance.GetComponent<NavMeshAgent>();
                if (agent != null)
                    agent.SetDestination(hit.point);
            }
        }
    }

    //Deselect the object in instance and do other clean up.
    private void OnDeselect(InputAction.CallbackContext context)
    {
        if (selectedObjectInstance != null)
        {
            selectedObjectInstance.Deselect();
            selectedObjectInstance=null;
        }
    }
}
