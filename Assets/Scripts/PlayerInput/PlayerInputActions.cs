//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlayerInput/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""9783f88b-59c5-48cb-9c32-a2e8c1c6bb1f"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""2b4b888f-8225-43ef-8f69-9ce35a4ac3f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use Trinket"",
                    ""type"": ""Button"",
                    ""id"": ""76d2d1f6-a903-4a3e-9c2b-8b0bf9643452"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InventoryUI"",
                    ""type"": ""Button"",
                    ""id"": ""259d25dc-ed99-4d26-8895-1f92afe27ba2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DropItem"",
                    ""type"": ""Button"",
                    ""id"": ""b974d7b3-3052-4a48-971f-8d53336ed433"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enteract"",
                    ""type"": ""Button"",
                    ""id"": ""03b42f9d-012a-43ac-883b-5b078e4ebf37"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c39f1c30-cbf0-41cf-bd32-81596613ae1a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7850c5cc-d9fb-4b55-ac44-d0628f818f61"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use Trinket"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9de608ed-9a0a-496b-805d-5d206115bb70"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InventoryUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd869680-8243-4e69-9f36-a8cd0fa1c034"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DropItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""669c8f26-03b4-4870-a280-323348287a81"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera Controls"",
            ""id"": ""80c3423b-559a-42a2-850b-dff08de73c29"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""e6939c3a-9d94-4eef-9673-5de7a224aba1"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateCamera"",
                    ""type"": ""Button"",
                    ""id"": ""1f22be29-44c0-4a2d-b6a8-4f324e3fd362"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FreeCam"",
                    ""type"": ""Button"",
                    ""id"": ""dc31d6bd-3198-4766-bcf0-59ee1b5cbfe7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveCamera"",
                    ""type"": ""Value"",
                    ""id"": ""c3a28029-dce4-4b58-9497-3d1459e6b515"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomCamera"",
                    ""type"": ""Value"",
                    ""id"": ""41c39193-02fd-4556-891d-99dad3cd7e01"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ResetCamera"",
                    ""type"": ""Button"",
                    ""id"": ""ad1b2e8f-4f63-4090-91bc-96ddb9850b48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""5eec48c2-0c42-4fa2-a860-e7215d614c9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c69e392e-99db-41f4-aee8-e6ef8cda9bb8"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6fde42c-13e8-4e4c-97d3-61a72bf77a8a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e06d9125-5ffd-4a64-9e4a-01e9f6bf6c68"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FreeCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5bf28a3e-e38e-423b-9b68-10ba2c2a579f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3135fae-0dad-43df-8393-8152d6d49bdf"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f97299d-e53d-4e03-a0a6-a81bd5a5c26f"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResetCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04215786-25da-4375-9d23-0bc22a81951c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Combat"",
            ""id"": ""8acf1a4a-0637-4483-bdee-123f836b2c76"",
            ""actions"": [
                {
                    ""name"": ""SelectTarget"",
                    ""type"": ""Button"",
                    ""id"": ""168c1a2e-cdcc-4626-9c6c-f92da6d9a699"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CycleTarget"",
                    ""type"": ""Button"",
                    ""id"": ""2822abb1-e85f-442f-a427-dee798af4a9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""59db52d5-87f6-487c-a229-755a211c1deb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc1adbae-dbb7-49ee-bf65-fc7be30575ef"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CycleTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Select = m_Player.FindAction("Select", throwIfNotFound: true);
        m_Player_UseTrinket = m_Player.FindAction("Use Trinket", throwIfNotFound: true);
        m_Player_InventoryUI = m_Player.FindAction("InventoryUI", throwIfNotFound: true);
        m_Player_DropItem = m_Player.FindAction("DropItem", throwIfNotFound: true);
        m_Player_Enteract = m_Player.FindAction("Enteract", throwIfNotFound: true);
        // Camera Controls
        m_CameraControls = asset.FindActionMap("Camera Controls", throwIfNotFound: true);
        m_CameraControls_Look = m_CameraControls.FindAction("Look", throwIfNotFound: true);
        m_CameraControls_RotateCamera = m_CameraControls.FindAction("RotateCamera", throwIfNotFound: true);
        m_CameraControls_FreeCam = m_CameraControls.FindAction("FreeCam", throwIfNotFound: true);
        m_CameraControls_MoveCamera = m_CameraControls.FindAction("MoveCamera", throwIfNotFound: true);
        m_CameraControls_ZoomCamera = m_CameraControls.FindAction("ZoomCamera", throwIfNotFound: true);
        m_CameraControls_ResetCamera = m_CameraControls.FindAction("ResetCamera", throwIfNotFound: true);
        m_CameraControls_Click = m_CameraControls.FindAction("Click", throwIfNotFound: true);
        // Player Combat
        m_PlayerCombat = asset.FindActionMap("Player Combat", throwIfNotFound: true);
        m_PlayerCombat_SelectTarget = m_PlayerCombat.FindAction("SelectTarget", throwIfNotFound: true);
        m_PlayerCombat_CycleTarget = m_PlayerCombat.FindAction("CycleTarget", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Select;
    private readonly InputAction m_Player_UseTrinket;
    private readonly InputAction m_Player_InventoryUI;
    private readonly InputAction m_Player_DropItem;
    private readonly InputAction m_Player_Enteract;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_Player_Select;
        public InputAction @UseTrinket => m_Wrapper.m_Player_UseTrinket;
        public InputAction @InventoryUI => m_Wrapper.m_Player_InventoryUI;
        public InputAction @DropItem => m_Wrapper.m_Player_DropItem;
        public InputAction @Enteract => m_Wrapper.m_Player_Enteract;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @UseTrinket.started += instance.OnUseTrinket;
            @UseTrinket.performed += instance.OnUseTrinket;
            @UseTrinket.canceled += instance.OnUseTrinket;
            @InventoryUI.started += instance.OnInventoryUI;
            @InventoryUI.performed += instance.OnInventoryUI;
            @InventoryUI.canceled += instance.OnInventoryUI;
            @DropItem.started += instance.OnDropItem;
            @DropItem.performed += instance.OnDropItem;
            @DropItem.canceled += instance.OnDropItem;
            @Enteract.started += instance.OnEnteract;
            @Enteract.performed += instance.OnEnteract;
            @Enteract.canceled += instance.OnEnteract;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @UseTrinket.started -= instance.OnUseTrinket;
            @UseTrinket.performed -= instance.OnUseTrinket;
            @UseTrinket.canceled -= instance.OnUseTrinket;
            @InventoryUI.started -= instance.OnInventoryUI;
            @InventoryUI.performed -= instance.OnInventoryUI;
            @InventoryUI.canceled -= instance.OnInventoryUI;
            @DropItem.started -= instance.OnDropItem;
            @DropItem.performed -= instance.OnDropItem;
            @DropItem.canceled -= instance.OnDropItem;
            @Enteract.started -= instance.OnEnteract;
            @Enteract.performed -= instance.OnEnteract;
            @Enteract.canceled -= instance.OnEnteract;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Camera Controls
    private readonly InputActionMap m_CameraControls;
    private List<ICameraControlsActions> m_CameraControlsActionsCallbackInterfaces = new List<ICameraControlsActions>();
    private readonly InputAction m_CameraControls_Look;
    private readonly InputAction m_CameraControls_RotateCamera;
    private readonly InputAction m_CameraControls_FreeCam;
    private readonly InputAction m_CameraControls_MoveCamera;
    private readonly InputAction m_CameraControls_ZoomCamera;
    private readonly InputAction m_CameraControls_ResetCamera;
    private readonly InputAction m_CameraControls_Click;
    public struct CameraControlsActions
    {
        private @PlayerInputActions m_Wrapper;
        public CameraControlsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_CameraControls_Look;
        public InputAction @RotateCamera => m_Wrapper.m_CameraControls_RotateCamera;
        public InputAction @FreeCam => m_Wrapper.m_CameraControls_FreeCam;
        public InputAction @MoveCamera => m_Wrapper.m_CameraControls_MoveCamera;
        public InputAction @ZoomCamera => m_Wrapper.m_CameraControls_ZoomCamera;
        public InputAction @ResetCamera => m_Wrapper.m_CameraControls_ResetCamera;
        public InputAction @Click => m_Wrapper.m_CameraControls_Click;
        public InputActionMap Get() { return m_Wrapper.m_CameraControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControlsActions set) { return set.Get(); }
        public void AddCallbacks(ICameraControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @RotateCamera.started += instance.OnRotateCamera;
            @RotateCamera.performed += instance.OnRotateCamera;
            @RotateCamera.canceled += instance.OnRotateCamera;
            @FreeCam.started += instance.OnFreeCam;
            @FreeCam.performed += instance.OnFreeCam;
            @FreeCam.canceled += instance.OnFreeCam;
            @MoveCamera.started += instance.OnMoveCamera;
            @MoveCamera.performed += instance.OnMoveCamera;
            @MoveCamera.canceled += instance.OnMoveCamera;
            @ZoomCamera.started += instance.OnZoomCamera;
            @ZoomCamera.performed += instance.OnZoomCamera;
            @ZoomCamera.canceled += instance.OnZoomCamera;
            @ResetCamera.started += instance.OnResetCamera;
            @ResetCamera.performed += instance.OnResetCamera;
            @ResetCamera.canceled += instance.OnResetCamera;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(ICameraControlsActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @RotateCamera.started -= instance.OnRotateCamera;
            @RotateCamera.performed -= instance.OnRotateCamera;
            @RotateCamera.canceled -= instance.OnRotateCamera;
            @FreeCam.started -= instance.OnFreeCam;
            @FreeCam.performed -= instance.OnFreeCam;
            @FreeCam.canceled -= instance.OnFreeCam;
            @MoveCamera.started -= instance.OnMoveCamera;
            @MoveCamera.performed -= instance.OnMoveCamera;
            @MoveCamera.canceled -= instance.OnMoveCamera;
            @ZoomCamera.started -= instance.OnZoomCamera;
            @ZoomCamera.performed -= instance.OnZoomCamera;
            @ZoomCamera.canceled -= instance.OnZoomCamera;
            @ResetCamera.started -= instance.OnResetCamera;
            @ResetCamera.performed -= instance.OnResetCamera;
            @ResetCamera.canceled -= instance.OnResetCamera;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(ICameraControlsActions instance)
        {
            if (m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraControlsActions @CameraControls => new CameraControlsActions(this);

    // Player Combat
    private readonly InputActionMap m_PlayerCombat;
    private List<IPlayerCombatActions> m_PlayerCombatActionsCallbackInterfaces = new List<IPlayerCombatActions>();
    private readonly InputAction m_PlayerCombat_SelectTarget;
    private readonly InputAction m_PlayerCombat_CycleTarget;
    public struct PlayerCombatActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerCombatActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectTarget => m_Wrapper.m_PlayerCombat_SelectTarget;
        public InputAction @CycleTarget => m_Wrapper.m_PlayerCombat_CycleTarget;
        public InputActionMap Get() { return m_Wrapper.m_PlayerCombat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerCombatActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerCombatActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerCombatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerCombatActionsCallbackInterfaces.Add(instance);
            @SelectTarget.started += instance.OnSelectTarget;
            @SelectTarget.performed += instance.OnSelectTarget;
            @SelectTarget.canceled += instance.OnSelectTarget;
            @CycleTarget.started += instance.OnCycleTarget;
            @CycleTarget.performed += instance.OnCycleTarget;
            @CycleTarget.canceled += instance.OnCycleTarget;
        }

        private void UnregisterCallbacks(IPlayerCombatActions instance)
        {
            @SelectTarget.started -= instance.OnSelectTarget;
            @SelectTarget.performed -= instance.OnSelectTarget;
            @SelectTarget.canceled -= instance.OnSelectTarget;
            @CycleTarget.started -= instance.OnCycleTarget;
            @CycleTarget.performed -= instance.OnCycleTarget;
            @CycleTarget.canceled -= instance.OnCycleTarget;
        }

        public void RemoveCallbacks(IPlayerCombatActions instance)
        {
            if (m_Wrapper.m_PlayerCombatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerCombatActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerCombatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerCombatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerCombatActions @PlayerCombat => new PlayerCombatActions(this);
    public interface IPlayerActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnUseTrinket(InputAction.CallbackContext context);
        void OnInventoryUI(InputAction.CallbackContext context);
        void OnDropItem(InputAction.CallbackContext context);
        void OnEnteract(InputAction.CallbackContext context);
    }
    public interface ICameraControlsActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnRotateCamera(InputAction.CallbackContext context);
        void OnFreeCam(InputAction.CallbackContext context);
        void OnMoveCamera(InputAction.CallbackContext context);
        void OnZoomCamera(InputAction.CallbackContext context);
        void OnResetCamera(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
    public interface IPlayerCombatActions
    {
        void OnSelectTarget(InputAction.CallbackContext context);
        void OnCycleTarget(InputAction.CallbackContext context);
    }
}
